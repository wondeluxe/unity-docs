'use strict';

import ProjectConfig from './projectconfig.js';
import DoxygenConfig from './doxygenconfig.js';
import SiteConfig from './siteconfig.js';

/**
 * Doxygen and Doxsite configuration values for a number of projects.
 */

export default class DocsConfig
{
	/**
	 * Path to the Doxyfile used by Doxygen.
	 * @type {String}
	 */

	doxyfile;

	/**
	 * Root output path for XML generated by Doxygen.
	 */

	xmlOutputPath;

	/**
	 * Path to the templates JSON file used to build the site.
	 * @type {String}
	 */

	templatesFile;

	/**
	 * Root path of the local generated/development site.
	 * @type {String}
	 */

	siteOutputPath;

	/**
	 * URL path to site root on the server/hosting environment.
	 * @type {String}
	 */

	urlRootPath;

	/**
	 * Relative path where API documentation pages will be created.
	 * @type {String}
	 */

	apiSubPath;

	/**
	 * Path from the site root where searchdata.js will be created.
	 * @type {String}
	 */

	searchdataSubPath;

	/**
	 * Config for each project.
	 * @type {Object.<String, ProjectConfig>}
	 */

	projects;

	/**
	 * Initialize a new DocsConfig object.
	 * @param {Object} config - Object containing values to initialize the DocsConfig with.
	 * @param {String} config.doxyfile - Path to the Doxyfile used by Doxygen.
	 * @param {String} config.xmlOutputPath - Root output path for XML generated by Doxygen.
	 * @param {String} config.templatesFile - Path to the templates JSON file used to build the site.
	 * @param {String} config.siteOutputPath - Root path of the local generated/development site.
	 * @param {String} config.urlRootPath - URL path to site root on the server/hosting environment.
	 * @param {String} config.apiSubPath - Relative path where API documentation pages will be created.
	 * @param {String} config.searchdataSubPath - Relative path where searchdata.js will be created.
	 * @param {Object.<String, ProjectConfig>} config.projects - Config for each project.
	 */

	constructor(config)
	{
		if (config)
		{
			this.doxyfile = config.doxyfile;
			this.xmlOutputPath = config.xmlOutputPath;
			this.templatesFile = config.templatesFile;
			this.siteOutputPath = config.siteOutputPath;
			this.urlRootPath = config.urlRootPath;
			this.apiSubPath = config.apiSubPath;
			this.searchdataSubPath = config.searchdataSubPath;
			this.projects = config.projects;
		}
	}

	/**
	 * Returns configuration values used by Doxygen to generate XML data for a project.
	 * @param {String} id - The project identifier to get configuration values for.
	 * @returns {DoxygenConfig} An object with Doxygen configuration values.
	 */

	getDoxygenConfig(id)
	{
		if (!id)
		{
			throw new Error(this.missingProjectIDErrorMessage());
		}

		let project = this.projects[id];

		if (!project)
		{
			throw new Error(this.invalidProjectIDErrorMessage(id));
		}

		return new DoxygenConfig({
			doxyfile: this.doxyfile,
			inputPaths: project.sourceInputPaths,
			outputPath: `${this.xmlOutputPath}/${project.xmlSubPath}`
		});
	}

	/**
	 * Returns configuration values used to build a documentation site for a project.
	 * @param {String} id - The project identifier to get configuration values for.
	 * @returns {SiteConfig} An object with site configuration values.
	 */

	getSiteConfig(id)
	{
		if (!id)
		{
			throw new Error(this.missingProjectIDErrorMessage());
		}

		let project = this.projects[id];

		if (!project)
		{
			throw new Error(this.invalidProjectIDErrorMessage(id));
		}

		return new SiteConfig({
			name: project.name,
			xmlPath: `${this.xmlOutputPath}/${project.xmlSubPath}`,
			templatesFile: this.templatesFile,
			outputPath: `${this.siteOutputPath}/${project.siteSubPath}`,
			urlRootPath: this.urlRootPath,
			urlProjectPath: `${this.urlRootPath}/${project.siteSubPath}`,
			apiSubPath: this.apiSubPath,
			searchdataSubPath: this.searchdataSubPath
		});
	}

	/**
	 * Returns the IDs (project keys) of all projects.
	 * @returns {String[]} The project IDs.
	 */

	getProjectIDs()
	{
		let ids = [];

		for (let id in this.projects)
		{
			ids.push(id);
		}

		return ids;
	}

	/**
	 * Returns an error message indicating a project ID is expected, but not supplied.
	 * @returns {String} An error message.
	 */

	missingProjectIDErrorMessage()
	{
		return `A project identifier must be supplied. Valid ids are: "${this.getProjectIDs().join('", "')}".`;
	}

	/**
	 * Returns an error message indicating a project ID was supplied, but not valid.
	 * @param {String} id - The supplied project ID.
	 * @returns {String} An error message.
	 */

	invalidProjectIDErrorMessage(id)
	{
		return `Project identifier "${id}" is invalid. Valid ids are: "${this.getProjectIDs().join('", "')}".`;
	}
}